# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow will build, test, sign and package a WPF or Windows Forms desktop application
# built on .NET Core.
# To learn how to migrate your existing application to .NET Core,
# refer to https://docs.microsoft.com/en-us/dotnet/desktop-wpf/migration/convert-project-from-net-framework
#
# To configure this workflow:
#
# 1. Configure environment variables
# GitHub sets default environment variables for every workflow run.
# Replace the variables relative to your project in the "env" section below.
#
# 2. Signing
# Generate a signing certificate in the Windows Application
# Packaging Project or add an existing signing certificate to the project.
# Next, use PowerShell to encode the .pfx file using Base64 encoding
# by running the following Powershell script to generate the output string:
#
# $pfx_cert = Get-Content '.\SigningCertificate.pfx' -Encoding Byte
# [System.Convert]::ToBase64String($pfx_cert) | Out-File 'SigningCertificate_Encoded.txt'
#
# Open the output file, SigningCertificate_Encoded.txt, and copy the
# string inside. Then, add the string to the repo as a GitHub secret
# and name it "Base64_Encoded_Pfx."
# For more information on how to configure your signing certificate for
# this workflow, refer to https://github.com/microsoft/github-actions-for-desktop-apps#signing
#
# Finally, add the signing certificate password to the repo as a secret and name it "Pfx_Key".
# See "Build the Windows Application Packaging project" below to see how the secret is used.
#
# For more information on GitHub Actions, refer to https://github.com/features/actions
# For a complete CI/CD sample to get started with GitHub Action workflows for Desktop Applications,
# refer to https://github.com/microsoft/github-actions-for-desktop-apps

name: Build EDQuickLauncher

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
    
concurrency: build_ed

jobs:
  build-release:
    name: Build Release on Windows
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: windows-2022
    steps:
      - uses: actions/checkout@v1
      - name: Initialize Submodules
        run: git submodule update --init --recursive
      - name: Setup Nuget
        uses: nuget/setup-nuget@v1
        with:
          nuget-version: "latest"
      - name: Restore Nuget Packages
        run: nuget restore src\EDQuickLauncher.sln
      - name: Define VERSION
        run: |
          $env:COMMIT = $env:GITHUB_SHA.Substring(0, 7)
          $env:REPO_NAME = $env:GITHUB_REPOSITORY -replace '.*/'
          $env:BRANCH = $env:GITHUB_REF -replace '.*/'
          ($env:REPO_NAME) >> VERSION
          ($env:BRANCH) >> VERSION
          ($env:COMMIT) >> VERSION
      - name: Build DotNet4 for Release
        run: |
          cd "C:\Program Files (x86)\Microsoft Visual Studio\2022\Enterprise\MSBuild\Current\Bin\"
           .\MSBuild.exe $Env:GITHUB_WORKSPACE\src\EDQuickLauncher.sln /t:Build /p:Configuration=Release
      - name: Build Squirrel Release
        id: build-squirrel
        run: |
          cd src\
          $releases = Invoke-WebRequest -Uri 'https://api.github.com/repos/thakyZ/EDQuickLauncher/releases'
          $current = ConvertFrom-Json -InputObject $releases.Content | Select-Object -First 1
          $refver = $env:GITHUB_REF -replace '.*/'
          echo "::set-output name=version::$refver"
          nuget pack .\EDQuickLauncher.nuspec -properties version=$refver
          mkdir Releases
          $release_file = $current.assets | Where-Object -Property name -Value RELEASES -EQ
          Invoke-WebRequest -Uri $release_file.browser_download_url -OutFile .\Releases\RELEASES
          $delta_file = $current.assets | Where-Object -Property name -Value "*delta.nupkg" -Like
          Invoke-WebRequest -Uri $delta_file.browser_download_url -OutFile ".\Releases\$($delta_file.name)"
          $full_file = $current.assets | Where-Object -Property name -Value "*full.nupkg" -Like
          Invoke-WebRequest -Uri $full_file.browser_download_url -OutFile ".\Releases\$($full_file.name)"
          $setup_file = $current.assets | Where-Object -Property name -Value "Setup.exe" -EQ
          Invoke-WebRequest -Uri $setup_file.browser_download_url -OutFile .\Releases\Setup.exe
           ~\.nuget\packages\squirrel.windows\2.0.2-netcore.3\tools\Squirrel.exe --no-msi --releasify .\EDQuickLauncher.$refver.nupkg --setupIcon=.\EDQuickLauncher\Resources\ed_icon.ico --icon=.\EDQuickLauncher\Resources\ed_icon.ico
          Start-Sleep -s 30
          rm ".\Releases\$($delta_file.name)"
          rm ".\Releases\$($full_file.name)"
      - name: Create Release
        uses: softprops/action-gh-release@91409e712cf565ce9eff10c87a8d1b11b81757ae
        env:
          GITHUB_TOKEN: ${{ secrets.AGITHUB_TOKEN }}
        with:
          files: src\Releases\**
          name: Release ${{ steps.build-squirrel.outputs.version }}
          body_path:  RELEASE.md
          prerelease: true
      - name: VirusTotal Scan
        uses: crazy-max/ghaction-virustotal@a3f74cfd584b0658320aec5e94ab6a8d16dca05f
        with:
          vt_api_key: ${{ secrets.VT_API_KEY }}
          files: ./src/Releases/*.exe

  build:
    name: Build on Windows
    runs-on: windows-2022
    if: "!startsWith(github.ref, 'refs/tags/')"
    steps:
      - uses: actions/checkout@v1
      - name: Initialize Submodules
        run: git submodule update --init --recursive
          
      - name: Setup Nuget
        uses: nuget/setup-nuget@v1
        with:
          nuget-version: "latest"
      - name: Restore Nuget Packages
        run: nuget restore src\EDQuickLauncher.sln
      - name: Define VERSION
        run: |
          $env:COMMIT = $env:GITHUB_SHA.Substring(0, 7)
          $env:REPO_NAME = $env:GITHUB_REPOSITORY -replace '.*/'
          $env:BRANCH = $env:GITHUB_REF -replace '.*/'
          ($env:REPO_NAME) >> VERSION
          ($env:BRANCH) >> VERSION
          ($env:COMMIT) >> VERSION
      - name: Build DotNet6 Master
        run: |
          cd "C:\Program Files (x86)\Microsoft Visual Studio\2022\Enterprise\MSBuild\Current\Bin\"
           .\MSBuild.exe $Env:GITHUB_WORKSPACE\src\EDQuickLauncher.sln /t:Build /p:Configuration=ReleaseNoUpdate
      - name: Upload artifact
        uses: actions/upload-artifact@master
        with:
          name: edquicklauncher-artifact
          path: src\bin\
